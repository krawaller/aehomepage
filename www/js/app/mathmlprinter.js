(function(){var MAXINTDIGIT,addbg,exportTo,helpers,print,printtexts,printwrap,spacewidth;if(typeof require==="function"){helpers=require("./helpers");printtexts=require("./texts_parser").parser.print}else{helpers=this.CATS.app.helpers;printtexts=this.CATS.texts.parser.print}printwrap=function(o,pre,markpaths,block,settings,nomark,noimplicit,parseprint){var str;if(settings==null){settings={lang:"en"}}str="<math xmlns='http://www.w3.org/1998/Math/MathML' display='"+(block?"block":"block")+"'>"+"<mrow>"+print(o,pre,markpaths,void 0,void 0,void 0,settings,nomark,noimplicit,parseprint)+"</mrow></math>";if(settings.rendermode==="mathjax"){str="<script type='math/mml'>"+str+"</script>"}return str="<a href='#' class='mathobj' linkto='"+JSON.stringify(o)+"'>"+str+"</a>"};MAXINTDIGIT=20;spacewidth="0.4em";print=function(o,pre,markpaths,me,parent,mypos,settings,nomark,noimplicit,parseprint){var base,child,classes,denom,dividee,divider,exp,first,i,lang,log,name,numer,op,outof,parenttype,ret,second,signs,str,trgt,v,_ref;if(me==null){me=[]}parenttype=parent!=null?parent.type:void 0;outof=parent!=null?(_ref=parent.objs)!=null?_ref.length:void 0:void 0;lang=settings.lang;classes=o.type;if(o.isblock){classes+=" isblock"}str=function(){var _i,_j,_k,_len,_len1,_len2,_ref1,_ref2,_ref3,_ref4,_ref5;switch(o.type){case"ispolynomial":name=printtexts.ispolynomial[lang];trgt=print(o.objs[0],pre,markpaths,me.concat([0]),o,0,settings,nomark,noimplicit,parseprint);return"<mrow class='"+classes+"'>"+trgt+"<mspace width='"+spacewidth+"' /><mo> "+name+"</mo></mrow>";case"ismonomial":name=printtexts.ismonomial[lang];trgt=print(o.objs[0],pre,markpaths,me.concat([0]),o,0,settings,nomark,noimplicit,parseprint);return"<mrow class='"+classes+"'>"+trgt+"<mspace width='"+spacewidth+"' /><mo> "+name+"</mo></mrow>";case"ismonfac":name=printtexts.ismonfac[lang];trgt=print(o.objs[0],pre,markpaths,me.concat([0]),o,0,settings,nomark,noimplicit,parseprint);return"<mrow class='"+classes+"'>"+trgt+"<mspace width='"+spacewidth+"' /><mo> "+name+"</mo></mrow>";case"varcount":name=printtexts.varcount[lang];trgt=print(o.objs[0],pre,markpaths,me.concat([0]),o,0,settings,nomark,noimplicit,parseprint);return"<mrow class='"+classes+"'><mo> "+name+"</mo><mspace width='"+spacewidth+"' />"+trgt+"</mrow>";case"isinteger":name=printtexts.isinteger[lang];trgt=print(o.objs[0],pre,markpaths,me.concat([0]),o,0,settings,nomark,noimplicit,parseprint);return"<mrow class='"+classes+"'>"+trgt+"<mspace width='"+spacewidth+"' /><mo> "+name+"</mo></mrow>";case"isprime":name=printtexts.isprime[lang];trgt=print(o.objs[0],pre,markpaths,me.concat([0]),o,0,settings,nomark,noimplicit,parseprint);return"<mrow class='"+classes+"'>"+trgt+"<mspace width='"+spacewidth+"' /><mo> "+name+"</mo></mrow>";case"log":base=o.objs[1];trgt=print(o.objs[0],pre,markpaths,me.concat([0]),o,0,settings,nomark,noimplicit,parseprint);if(!noimplicit&&base.type==="number"&&base.val==="10"){return"<mrow class='"+classes+"'><mi>log</mi>"+trgt+"</mrow>"}else if(!noimplicit&&base.type==="const"&&base.val==="e"){return"<mrow class='"+classes+"'><mi>ln</mi>"+trgt+"</mrow>"}else{log=print(o.objs[1],pre,markpaths,me.concat([1]),o,1,settings,nomark,noimplicit,parseprint);return"<mrow><msub class='"+classes+"'><mi>log</mi>"+log+"</msub>"+trgt+"</mrow>"}break;case"DIVTEST":dividee=print(o.objs[0],pre,markpaths,me.concat([0]),o,0,settings,nomark,noimplicit,parseprint);divider=print(o.objs[1],pre,markpaths,me.concat([1]),o,1,settings,nomark,noimplicit,parseprint);return"<mrow>"+dividee+("<mspace width='"+spacewidth+"' /><mo>")+printtexts.isdividable[lang]+("</mo><mspace width='"+spacewidth+"' />")+divider+"</mrow>";case"BOOLEAN":case"true":case"false":return"<mi>"+printtexts["logic"+("false"===o.val||"false"===o.type?"false":"true")][lang]+"</mi>";case"NOT":return"<mrow><mo>"+printtexts.logicNOT[lang]+"</mo>"+print(o.objs[0],pre,markpaths,me.concat([0]),"NOT",0,settings,nomark,noimplicit,parseprint)+"</mrow>";case"XOR":first=print(o.objs[0],pre,markpaths,me.concat([0]),o,0,settings,nomark,noimplicit,parseprint);second=print(o.objs[1],pre,markpaths,me.concat([1]),o,1,settings,nomark,noimplicit,parseprint);op="&#8891;";return"<mrow>"+first+"<mo>"+op+"</mo>"+second+"</mrow>";case"AND":case"OR":name=printtexts["logic"+o.type][lang];ret="<mtable frame='none' rowlines='none'>";_ref1=o.objs;for(i=_i=0,_len=_ref1.length;_i<_len;i=++_i){v=_ref1[i];ret+="<mtr><mtd>"+print(o.objs[i],pre,markpaths,me.concat([i]),o,i,settings,nomark,noimplicit,parseprint)+"</mtd></mtr>";if(i<o.objs.length-1){ret+="<mtr><mtd><mrow mathcolor='#BBB'><mi>"+name+"</mi></mrow></mtd></mtr>"}}return ret+="</mtable>";case"ifelse":ret="<mtable frame='none' rowlines='none' columnalign='right left'>";ret+="<mtr><mtd><mi mathcolor='#BBB'>"+(printtexts["if"][lang]||"BAJSPOOP"+lang)+"</mi></mtd><mtd>"+print(o.objs[0],pre,markpaths,me.concat([0]),o,0,settings,nomark,noimplicit,parseprint)+"</mtd></mtr>";ret+="<mtr><mtd><mi mathcolor='#BBB'>"+printtexts.then[lang]+"</mi></mtd><mtd>"+print(o.objs[1],pre,markpaths,me.concat([1]),o,1,settings,nomark,noimplicit,parseprint)+"</mtd></mtr>";ret+="<mtr><mtd><mi mathcolor='#BBB'>"+printtexts["else"][lang]+"</mi></mtd><mtd>"+print(o.objs[2],pre,markpaths,me.concat([2]),o,2,settings,nomark,noimplicit,parseprint)+"</mtd></mtr>";return ret+="</mtable>";case"number":ret="<mn class='"+classes+"'>"+(settings.lang==="sv"?o.val.replace(".",","):o.val)+"</mn>";if(parseprint&&o.val.replace(/[\.\,]/,"Q").split("Q")[0].length>MAXINTDIGIT){return"<mstyle mathcolor='red'>"+ret+"</mstyle>"}else{return ret}break;case"void":return"<mstyle mathcolor='red'><mi>&#8224;</mi></mstyle>";case"fraction":numer=print(o.objs[0],pre,markpaths,me.concat([0]),o,0,settings,nomark,noimplicit,parseprint);denom=print(o.objs[1],pre,markpaths,me.concat([1]),o,1,settings,nomark,noimplicit,parseprint);return"<mfrac class='"+classes+"'>"+((_ref2=numer.type)==="sum"||_ref2==="product"?numer:"<mrow>"+numer+"</mrow>")+((_ref3=denom.type)==="sum"||_ref3==="product"?denom:"<mrow>"+denom+"</mrow>")+"</mfrac>";case"demo":return"<mrow>"+print(o.objs[0],pre,markpaths,me.concat([0]),o,0,settings,nomark,noimplicit,parseprint)+"<mo>&#8596;</mo>"+print(o.objs[1],pre,markpaths,me.concat([1]),"demo",1,settings,nomark,noimplicit,parseprint)+"</mrow>";case"gives":return"<mrow>"+print(o.objs[0],pre,markpaths,me.concat([0]),o,0,settings,nomark,noimplicit,parseprint)+"<mo>&rarr;</mo>"+print(o.objs[1],pre,markpaths,me.concat([1]),"demo",1,settings,nomark,noimplicit,parseprint)+"</mrow>";case"sum":ret="";_ref4=o.objs;for(i=_j=0,_len1=_ref4.length;_j<_len1;i=++_j){v=_ref4[i];child=print(v,pre,markpaths,me.concat([i]),o,i,settings,nomark,noimplicit,parseprint);ret+=child;if(i<o.objs.length-1){if(!noimplicit&&o.objs[i+1]&&helpers.implicitadd(v,o.objs[i+1])){ret+=" "}else{ret+="<mo>+</mo>"}}}return"<mrow>"+ret+"</mrow>";case"product":ret="";_ref5=o.objs;for(i=_k=0,_len2=_ref5.length;_k<_len2;i=++_k){v=_ref5[i];child=print(v,pre,markpaths,me.concat([i]),o,i,settings,nomark,noimplicit,parseprint);ret+=child;if(i<o.objs.length-1){if(!noimplicit&&helpers.implicitmult(v,o.objs[i+1])){ret+=""}else{ret+="<mo>&middot;</mo>"}}}return"<mrow>"+ret+"</mrow>";case"variable":return"<mi>"+o.val+"</mi>";case"power":base=print(o.objs[0],pre,markpaths,me.concat([0]),o,0,settings,nomark,noimplicit,parseprint);exp=print(o.objs[1],pre,markpaths,me.concat([1]),o,1,settings,nomark,noimplicit,parseprint);return"<msup class='"+classes+"'>"+base+"<mrow>"+exp+"</mrow></msup>";case"negation":return"<mrow><mo>&#8722;</mo>"+print(o.objs[0],pre,markpaths,me.concat([0]),o,0,settings,nomark,noimplicit,parseprint)+"</mrow>";case"plusminus":return"<mrow><mo>&#177;</mo>"+print(o.objs[0],pre,markpaths,me.concat([0]),o,0,settings,nomark,noimplicit,parseprint)+"</mrow>";case"absolute":return"<mfenced open='|' close='|'>"+print(o.objs[0],pre,markpaths,me.concat([0]),o,0,settings,nomark,noimplicit,parseprint)+"</mfenced>";case"relation":signs={eq:"&#61;",lt:"&lt;",gt:"&gt;",leq:"&le;",geq:"&ge;",neq:"&ne;"};return"<mrow>"+print(o.objs[0],pre,markpaths,me.concat([0]),o,0,settings,nomark,noimplicit,parseprint)+("<mo>"+signs[o.val||"eq"]+"</mo>")+print(o.objs[1],pre,markpaths,me.concat([1]),"relation",1,settings,nomark,noimplicit,parseprint)+"</mrow>";case"function":return"<mrow><mi>"+o.val+"</mi><mfenced separators=''>"+print(o.objs[0],pre,markpaths,me.concat([0]),"function",0,settings,nomark,noimplicit,parseprint)+"</mfenced></mrow>";case"const":switch(o.val){case"pi":return"<mi>&#960;</mi>";case"undefined":return"<mi>"+printtexts["undefinedval"][settings.lang]+"</mi>";case"percent":return"<mi>%</mi>";default:return"<mi>"+o.val+"</mi>"}break;case"true":case"false":return"<mi>"+printtexts[o.type][settings.lang]+"</mi>";case"root":if(!noimplicit&&o.objs[1].type==="number"&&o.objs[1].val==="2"){return"<msqrt>"+print(o.objs[0],pre,markpaths,me.concat([0]),o,0,settings,nomark,noimplicit,parseprint)+"</msqrt>"}else{return"<mroot>"+print(o.objs[0],pre,markpaths,me.concat([0]),o,0,settings,nomark,noimplicit,parseprint)+print(o.objs[1],pre,markpaths,me.concat([1]),"root",1,settings,nomark,noimplicit,parseprint)+"</mroot>"}break;default:return"<mi>"+o.type+"</mi>"}}();if(helpers.needsparens(o,parenttype,mypos,outof)){str="<mfenced separators=''>"+str+"</mfenced>"}if(!nomark){if(helpers.matchAddress(me,[],[pre])){str=addbg(str,!(markpaths.length||true)?"#C7D3FF":"#E7EDFF")}else if(helpers.matchAddress(me,pre,markpaths)){str=addbg(str,"#C7D3FF")}}return str};addbg=function(str,color){return str.replace(/^(\<[a-z]*)/,function(s,cap,num,all){return cap+(" mathbackground='"+color+"'")})};if(typeof exports==="undefined"){exportTo=this.CATS.app}else{exportTo=exports}exportTo.mathmlprinter=printwrap}).call(this);